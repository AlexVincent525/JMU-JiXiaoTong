// GENERATED CODE - DO NOT MODIFY MANUALLY
// **************************************************************************
// Auto generated by https://github.com/fluttercandies/ff_annotation_route
// **************************************************************************

import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'model/models.dart';
import 'providers/providers.dart';

const List<String> routeNames = <String>[
  'openjmu://add-comment',
  'openjmu://add-forward',
  'openjmu://app-center-page',
  'openjmu://backpack',
  'openjmu://changelog-page',
  'openjmu://chat-app-message-page',
  'openjmu://edit-profile-page',
  'openjmu://font-scale',
  'openjmu://home',
  'openjmu://image-crop',
  'openjmu://image-viewer',
  'openjmu://in-app-webview',
  'openjmu://login',
  'openjmu://news-detail',
  'openjmu://notifications',
  'openjmu://post-detail',
  'openjmu://publish-post',
  'openjmu://publish-team-post',
  'openjmu://scan-qr-code',
  'openjmu://search',
  'openjmu://settings',
  'openjmu://splash',
  'openjmu://switch-startup',
  'openjmu://team-post-detail',
  'openjmu://user-list-page',
  'openjmu://user-page',
  'openjmu://user-qr-code',
];

class Routes {
  const Routes._();

  /// '新增评论'
  ///
  /// [name] : 'openjmu://add-comment'
  ///
  /// [routeName] : '新增评论'
  ///
  /// [constructors] :
  ///
  /// CommentPositioned : [Key key, Post(required) post, Comment comment]
  ///
  /// [pageRouteType] : PageRouteType.transparent
  static const _OpenjmuAddComment openjmuAddComment = _OpenjmuAddComment();

  /// '新增转发'
  ///
  /// [name] : 'openjmu://add-forward'
  ///
  /// [routeName] : '新增转发'
  ///
  /// [constructors] :
  ///
  /// ForwardPositioned : [Key key, Post(required) post]
  ///
  /// [pageRouteType] : PageRouteType.transparent
  static const _OpenjmuAddForward openjmuAddForward = _OpenjmuAddForward();

  /// '应用中心'
  ///
  /// [name] : 'openjmu://app-center-page'
  ///
  /// [routeName] : '应用中心'
  static const String openjmuAppCenterPage = 'openjmu://app-center-page';

  /// '背包页'
  ///
  /// [name] : 'openjmu://backpack'
  ///
  /// [routeName] : '背包页'
  static const String openjmuBackpack = 'openjmu://backpack';

  /// '版本履历'
  ///
  /// [name] : 'openjmu://changelog-page'
  ///
  /// [routeName] : '版本履历'
  static const String openjmuChangelogPage = 'openjmu://changelog-page';

  /// '应用消息页'
  ///
  /// [name] : 'openjmu://chat-app-message-page'
  ///
  /// [routeName] : '应用消息页'
  ///
  /// [constructors] :
  ///
  /// ChatAppMessagePage : [WebApp(required) app, Key key]
  static const _OpenjmuChatAppMessagePage openjmuChatAppMessagePage =
      _OpenjmuChatAppMessagePage();

  /// '编辑资料页'
  ///
  /// [name] : 'openjmu://edit-profile-page'
  ///
  /// [routeName] : '编辑资料页'
  static const String openjmuEditProfilePage = 'openjmu://edit-profile-page';

  /// '更改字号页'
  ///
  /// [name] : 'openjmu://font-scale'
  ///
  /// [routeName] : '更改字号页'
  static const String openjmuFontScale = 'openjmu://font-scale';

  /// '首页'
  ///
  /// [name] : 'openjmu://home'
  ///
  /// [routeName] : '首页'
  ///
  /// [constructors] :
  ///
  /// MainPage : [Key key, int initAction]
  static const _OpenjmuHome openjmuHome = _OpenjmuHome();

  /// '图片裁剪'
  ///
  /// [name] : 'openjmu://image-crop'
  ///
  /// [routeName] : '图片裁剪'
  static const String openjmuImageCrop = 'openjmu://image-crop';

  /// '图片浏览'
  ///
  /// [name] : 'openjmu://image-viewer'
  ///
  /// [routeName] : '图片浏览'
  ///
  /// [constructors] :
  ///
  /// ImageViewer : [int(required) index, List<ImageBean>(required) pics, String heroPrefix, bool needsClear, Post post]
  ///
  /// [pageRouteType] : PageRouteType.transparent
  static const _OpenjmuImageViewer openjmuImageViewer = _OpenjmuImageViewer();

  /// '网页浏览'
  ///
  /// [name] : 'openjmu://in-app-webview'
  ///
  /// [routeName] : '网页浏览'
  ///
  /// [constructors] :
  ///
  /// InAppWebViewPage : [Key key, String(required) url, String title, WebApp app, bool withCookie, bool withAppBar, bool withAction, bool withScaffold, bool keepAlive]
  static const _OpenjmuInAppWebview openjmuInAppWebview =
      _OpenjmuInAppWebview();

  /// '登录页'
  ///
  /// [name] : 'openjmu://login'
  ///
  /// [routeName] : '登录页'
  ///
  /// [constructors] :
  ///
  /// LoginPage : [Key key, int initAction]
  static const _OpenjmuLogin openjmuLogin = _OpenjmuLogin();

  /// '新闻详情页'
  ///
  /// [name] : 'openjmu://news-detail'
  ///
  /// [routeName] : '新闻详情页'
  ///
  /// [constructors] :
  ///
  /// NewsDetailPage : [Key key, News news]
  static const _OpenjmuNewsDetail openjmuNewsDetail = _OpenjmuNewsDetail();

  /// '通知页'
  ///
  /// [name] : 'openjmu://notifications'
  ///
  /// [routeName] : '通知页'
  ///
  /// [constructors] :
  ///
  /// NotificationsPage : [Key key, String(required) initialPage]
  ///
  /// [pageRouteType] : PageRouteType.transparent
  static const _OpenjmuNotifications openjmuNotifications =
      _OpenjmuNotifications();

  /// '动态详情页'
  ///
  /// [name] : 'openjmu://post-detail'
  ///
  /// [routeName] : '动态详情页'
  ///
  /// [constructors] :
  ///
  /// PostDetailPage : [Post(required) post, int index, String fromPage, BuildContext parentContext]
  static const _OpenjmuPostDetail openjmuPostDetail = _OpenjmuPostDetail();

  /// '发布动态'
  ///
  /// [name] : 'openjmu://publish-post'
  ///
  /// [routeName] : '发布动态'
  ///
  /// [constructors] :
  ///
  /// PublishPostPage : [Key key]
  static const _OpenjmuPublishPost openjmuPublishPost = _OpenjmuPublishPost();

  /// '发布小组动态'
  ///
  /// [name] : 'openjmu://publish-team-post'
  ///
  /// [routeName] : '发布小组动态'
  ///
  /// [constructors] :
  ///
  /// PublishTeamPostPage : [Key key]
  static const _OpenjmuPublishTeamPost openjmuPublishTeamPost =
      _OpenjmuPublishTeamPost();

  /// '扫描二维码'
  ///
  /// [name] : 'openjmu://scan-qr-code'
  ///
  /// [routeName] : '扫描二维码'
  static const String openjmuScanQrCode = 'openjmu://scan-qr-code';

  /// '搜索页'
  ///
  /// [name] : 'openjmu://search'
  ///
  /// [routeName] : '搜索页'
  ///
  /// [constructors] :
  ///
  /// SearchPage : [String content]
  static const _OpenjmuSearch openjmuSearch = _OpenjmuSearch();

  /// '设置页'
  ///
  /// [name] : 'openjmu://settings'
  ///
  /// [routeName] : '设置页'
  ///
  /// [constructors] :
  ///
  /// SettingsPage : [Key key]
  static const _OpenjmuSettings openjmuSettings = _OpenjmuSettings();

  /// '启动页'
  ///
  /// [name] : 'openjmu://splash'
  ///
  /// [routeName] : '启动页'
  ///
  /// [constructors] :
  ///
  /// SplashPage : [Key key, int initAction]
  static const _OpenjmuSplash openjmuSplash = _OpenjmuSplash();

  /// '切换启动页'
  ///
  /// [name] : 'openjmu://switch-startup'
  ///
  /// [routeName] : '切换启动页'
  static const String openjmuSwitchStartup = 'openjmu://switch-startup';

  /// '小组动态详情页'
  ///
  /// [name] : 'openjmu://team-post-detail'
  ///
  /// [routeName] : '小组动态详情页'
  ///
  /// [constructors] :
  ///
  /// TeamPostDetailPage : [TeamPostProvider provider, TeamPostType(required) type, int postId, Key key]
  static const _OpenjmuTeamPostDetail openjmuTeamPostDetail =
      _OpenjmuTeamPostDetail();

  /// '用户列表页'
  ///
  /// [name] : 'openjmu://user-list-page'
  ///
  /// [routeName] : '用户列表页'
  ///
  /// [constructors] :
  ///
  /// UserListPage : [Key key, UserInfo(required) user, int(required) type]
  static const _OpenjmuUserListPage openjmuUserListPage =
      _OpenjmuUserListPage();

  /// '用户页'
  ///
  /// [name] : 'openjmu://user-page'
  ///
  /// [routeName] : '用户页'
  ///
  /// [constructors] :
  ///
  /// UserPage : [Key key, String(required) uid]
  static const _OpenjmuUserPage openjmuUserPage = _OpenjmuUserPage();

  /// '用户二维码页'
  ///
  /// [name] : 'openjmu://user-qr-code'
  ///
  /// [routeName] : '用户二维码页'
  ///
  /// [pageRouteType] : PageRouteType.transparent
  static const String openjmuUserQrCode = 'openjmu://user-qr-code';
}

class _OpenjmuAddComment {
  const _OpenjmuAddComment();

  String get name => 'openjmu://add-comment';

  Map<String, dynamic> d({Key key, @required Post post, Comment comment}) =>
      <String, dynamic>{
        'key': key,
        'post': post,
        'comment': comment,
      };

  @override
  String toString() => name;
}

class _OpenjmuAddForward {
  const _OpenjmuAddForward();

  String get name => 'openjmu://add-forward';

  Map<String, dynamic> d({Key key, @required Post post}) => <String, dynamic>{
        'key': key,
        'post': post,
      };

  @override
  String toString() => name;
}

class _OpenjmuChatAppMessagePage {
  const _OpenjmuChatAppMessagePage();

  String get name => 'openjmu://chat-app-message-page';

  Map<String, dynamic> d({@required WebApp app, Key key}) => <String, dynamic>{
        'app': app,
        'key': key,
      };

  @override
  String toString() => name;
}

class _OpenjmuHome {
  const _OpenjmuHome();

  String get name => 'openjmu://home';

  Map<String, dynamic> d({Key key, int initAction}) => <String, dynamic>{
        'key': key,
        'initAction': initAction,
      };

  @override
  String toString() => name;
}

class _OpenjmuImageViewer {
  const _OpenjmuImageViewer();

  String get name => 'openjmu://image-viewer';

  Map<String, dynamic> d(
          {@required int index,
          @required List<ImageBean> pics,
          String heroPrefix,
          bool needsClear = false,
          Post post}) =>
      <String, dynamic>{
        'index': index,
        'pics': pics,
        'heroPrefix': heroPrefix,
        'needsClear': needsClear,
        'post': post,
      };

  @override
  String toString() => name;
}

class _OpenjmuInAppWebview {
  const _OpenjmuInAppWebview();

  String get name => 'openjmu://in-app-webview';

  Map<String, dynamic> d(
          {Key key,
          @required String url,
          String title,
          WebApp app,
          bool withCookie = true,
          bool withAppBar = true,
          bool withAction = true,
          bool withScaffold = true,
          bool keepAlive = false}) =>
      <String, dynamic>{
        'key': key,
        'url': url,
        'title': title,
        'app': app,
        'withCookie': withCookie,
        'withAppBar': withAppBar,
        'withAction': withAction,
        'withScaffold': withScaffold,
        'keepAlive': keepAlive,
      };

  @override
  String toString() => name;
}

class _OpenjmuLogin {
  const _OpenjmuLogin();

  String get name => 'openjmu://login';

  Map<String, dynamic> d({Key key, int initAction}) => <String, dynamic>{
        'key': key,
        'initAction': initAction,
      };

  @override
  String toString() => name;
}

class _OpenjmuNewsDetail {
  const _OpenjmuNewsDetail();

  String get name => 'openjmu://news-detail';

  Map<String, dynamic> d({Key key, News news}) => <String, dynamic>{
        'key': key,
        'news': news,
      };

  @override
  String toString() => name;
}

class _OpenjmuNotifications {
  const _OpenjmuNotifications();

  String get name => 'openjmu://notifications';

  Map<String, dynamic> d({Key key, @required String initialPage}) =>
      <String, dynamic>{
        'key': key,
        'initialPage': initialPage,
      };

  @override
  String toString() => name;
}

class _OpenjmuPostDetail {
  const _OpenjmuPostDetail();

  String get name => 'openjmu://post-detail';

  Map<String, dynamic> d(
          {@required Post post,
          int index,
          String fromPage,
          BuildContext parentContext}) =>
      <String, dynamic>{
        'post': post,
        'index': index,
        'fromPage': fromPage,
        'parentContext': parentContext,
      };

  @override
  String toString() => name;
}

class _OpenjmuPublishPost {
  const _OpenjmuPublishPost();

  String get name => 'openjmu://publish-post';

  Map<String, dynamic> d({Key key}) => <String, dynamic>{
        'key': key,
      };

  @override
  String toString() => name;
}

class _OpenjmuPublishTeamPost {
  const _OpenjmuPublishTeamPost();

  String get name => 'openjmu://publish-team-post';

  Map<String, dynamic> d({Key key}) => <String, dynamic>{
        'key': key,
      };

  @override
  String toString() => name;
}

class _OpenjmuSearch {
  const _OpenjmuSearch();

  String get name => 'openjmu://search';

  Map<String, dynamic> d({String content}) => <String, dynamic>{
        'content': content,
      };

  @override
  String toString() => name;
}

class _OpenjmuSettings {
  const _OpenjmuSettings();

  String get name => 'openjmu://settings';

  Map<String, dynamic> d({Key key}) => <String, dynamic>{
        'key': key,
      };

  @override
  String toString() => name;
}

class _OpenjmuSplash {
  const _OpenjmuSplash();

  String get name => 'openjmu://splash';

  Map<String, dynamic> d({Key key, int initAction}) => <String, dynamic>{
        'key': key,
        'initAction': initAction,
      };

  @override
  String toString() => name;
}

class _OpenjmuTeamPostDetail {
  const _OpenjmuTeamPostDetail();

  String get name => 'openjmu://team-post-detail';

  Map<String, dynamic> d(
          {TeamPostProvider provider,
          @required TeamPostType type,
          int postId,
          Key key}) =>
      <String, dynamic>{
        'provider': provider,
        'type': type,
        'postId': postId,
        'key': key,
      };

  @override
  String toString() => name;
}

class _OpenjmuUserListPage {
  const _OpenjmuUserListPage();

  String get name => 'openjmu://user-list-page';

  Map<String, dynamic> d(
          {Key key, @required UserInfo user, @required int type}) =>
      <String, dynamic>{
        'key': key,
        'user': user,
        'type': type,
      };

  @override
  String toString() => name;
}

class _OpenjmuUserPage {
  const _OpenjmuUserPage();

  String get name => 'openjmu://user-page';

  Map<String, dynamic> d({Key key, @required String uid}) => <String, dynamic>{
        'key': key,
        'uid': uid,
      };

  @override
  String toString() => name;
}
